{"name": "test_registration_form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Sign up successful.\nMessage: unexpected alert open: {Alert text : Sign up successful.}\n  (Session info: headless chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00D2A813+48355]\n\t(No symbol) [0x00CBC4B1]\n\t(No symbol) [0x00BC5358]\n\t(No symbol) [0x00C1CDAD]\n\t(No symbol) [0x00C0A536]\n\t(No symbol) [0x00BE82DC]\n\t(No symbol) [0x00BE93DD]\n\tGetHandleVerifier [0x00F8AABD+2539405]\n\tGetHandleVerifier [0x00FCA78F+2800735]\n\tGetHandleVerifier [0x00FC456C+2775612]\n\tGetHandleVerifier [0x00DB51E0+616112]\n\t(No symbol) [0x00CC5F8C]\n\t(No symbol) [0x00CC2328]\n\t(No symbol) [0x00CC240B]\n\t(No symbol) [0x00CB4FF7]\n\tBaseThreadInitThunk [0x779500C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E57B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E57AEE+238]", "trace": "self = <tests.test_registration.TestRegistrationForm object at 0x0000022E30BC68F0>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"51885c6b7d73f52a7791b737031c6415\")>\n\n    @pytest.mark.registration_test(scope='function', autouse=True)\n    def test_registration_form(self, browser):\n        page = RegistrationPage(browser, 'https://www.demoblaze.com/')\n        page.open_page()\n        page.registration_new_user()\n>       page.is_alert_message_present(RegistrationData.sing_up_successful_message)\n\ntests\\test_registration.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.registration_page.RegistrationPage object at 0x0000022E30BC5B40>, allert_message = 'Sign up successful.'\n\n    def is_alert_message_present(self, allert_message):\n        '''Функция проверки появления алерта с соответствующим сообщением'''\n        with allure.step('Проверяем, что появился алерт с соответствующим сообщением'):\n    \n            try:\n                WebDriverWait(self.browser, timeout=1).until(EC.alert_is_present(), 'Timed out waiting.')\n                sign_up_alert = self.browser.switch_to.alert\n                assert sign_up_alert.text == allert_message, 'The message in the alert box does not match the expected'\n>               allure.attach(self.browser.get_screenshot_as_png(), name='Screenshot', attachment_type=AttachmentType.PNG)\n\npages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"51885c6b7d73f52a7791b737031c6415\")>\n\n    def get_screenshot_as_png(self) -> bytes:\n        \"\"\"Gets the screenshot of the current window as a binary data.\n    \n        :Usage:\n            ::\n    \n                driver.get_screenshot_as_png()\n        \"\"\"\n>       return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:836: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"51885c6b7d73f52a7791b737031c6415\")>\n\n    def get_screenshot_as_base64(self) -> str:\n        \"\"\"Gets the screenshot of the current window as a base64 encoded string\n        which is useful in embedded images in HTML.\n    \n        :Usage:\n            ::\n    \n                driver.get_screenshot_as_base64()\n        \"\"\"\n>       return self.execute(Command.SCREENSHOT)[\"value\"]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:847: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"51885c6b7d73f52a7791b737031c6415\")>, driver_command = 'screenshot', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022E30BC59C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Sign up successful.\"},\"error\":\"unexpected alert open\",\"message\":\"u...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E57B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E57AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Sign up successful.\nE           Message: unexpected alert open: {Alert text : Sign up successful.}\nE             (Session info: headless chrome=114.0.5735.199)\nE           Stacktrace:\nE           Backtrace:\nE           \tGetHandleVerifier [0x00D2A813+48355]\nE           \t(No symbol) [0x00CBC4B1]\nE           \t(No symbol) [0x00BC5358]\nE           \t(No symbol) [0x00C1CDAD]\nE           \t(No symbol) [0x00C0A536]\nE           \t(No symbol) [0x00BE82DC]\nE           \t(No symbol) [0x00BE93DD]\nE           \tGetHandleVerifier [0x00F8AABD+2539405]\nE           \tGetHandleVerifier [0x00FCA78F+2800735]\nE           \tGetHandleVerifier [0x00FC456C+2775612]\nE           \tGetHandleVerifier [0x00DB51E0+616112]\nE           \t(No symbol) [0x00CC5F8C]\nE           \t(No symbol) [0x00CC2328]\nE           \t(No symbol) [0x00CC240B]\nE           \t(No symbol) [0x00CB4FF7]\nE           \tBaseThreadInitThunk [0x779500C9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77E57B1E+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x77E57AEE+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException"}, "steps": [{"name": "Открываем главную страницу", "status": "passed", "start": 1689790751773, "stop": 1689790753230}, {"name": "Нажаимаем на кнопку регистрации                          нового пользователя в navbar.", "status": "passed", "start": 1689790753231, "stop": 1689790753259}, {"name": "Заполняем поля username и password.", "status": "passed", "start": 1689790753260, "stop": 1689790753585}, {"name": "Нажимаем на кнопку регистрации                          нового пользователя в модальном окне регистрации.", "status": "passed", "start": 1689790753585, "stop": 1689790753610}, {"name": "Проверяем, что появился алерт с соответствующим сообщением", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Sign up successful.\nMessage: unexpected alert open: {Alert text : Sign up successful.}\n  (Session info: headless chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00D2A813+48355]\n\t(No symbol) [0x00CBC4B1]\n\t(No symbol) [0x00BC5358]\n\t(No symbol) [0x00C1CDAD]\n\t(No symbol) [0x00C0A536]\n\t(No symbol) [0x00BE82DC]\n\t(No symbol) [0x00BE93DD]\n\tGetHandleVerifier [0x00F8AABD+2539405]\n\tGetHandleVerifier [0x00FCA78F+2800735]\n\tGetHandleVerifier [0x00FC456C+2775612]\n\tGetHandleVerifier [0x00DB51E0+616112]\n\t(No symbol) [0x00CC5F8C]\n\t(No symbol) [0x00CC2328]\n\t(No symbol) [0x00CC240B]\n\t(No symbol) [0x00CB4FF7]\n\tBaseThreadInitThunk [0x779500C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E57B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E57AEE+238]\n\n", "trace": "  File \"C:\\dev\\UI-test-automation\\pages\\base_page.py\", line 42, in is_alert_message_present\n    allure.attach(self.browser.get_screenshot_as_png(), name='Screenshot', attachment_type=AttachmentType.PNG)\n  File \"C:\\dev\\UI-test-automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 836, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n  File \"C:\\dev\\UI-test-automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 847, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n  File \"C:\\dev\\UI-test-automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\dev\\UI-test-automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 244, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n"}, "start": 1689790753610, "stop": 1689790754134}], "start": 1689790751772, "stop": 1689790754136, "uuid": "2976ea72-a00e-4a6c-a2ca-4650ad62b048", "historyId": "7c62ead2c384f2f63a2e5d8cf54b42d8", "testCaseId": "7c62ead2c384f2f63a2e5d8cf54b42d8", "fullName": "tests.test_registration.TestRegistrationForm#test_registration_form", "labels": [{"name": "tag", "value": "registration_test(scope='function', autouse=True)"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration"}, {"name": "subSuite", "value": "TestRegistrationForm"}, {"name": "host", "value": "DESKTOP-QIGAR15"}, {"name": "thread", "value": "16756-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration"}]}