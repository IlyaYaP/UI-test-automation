{"uid":"c17a47cd1eb1d038","name":"test_login_form","fullName":"tests.test_registration_and_login.TestRegistrationAndLoginForm#test_login_form","historyId":"8ba6a131cb9b43313debe0c792d10484","time":{"start":1690741758949,"stop":1690741760484,"duration":1535},"status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Wrong password.\nMessage: unexpected alert open: {Alert text : Wrong password.}\n  (Session info: headless chrome=115.0.5790.102)\nStacktrace:\n#0 0x563658b7c783 <unknown>\n#1 0x5636588a8917 <unknown>\n#2 0x563658920783 <unknown>\n#3 0x563658907bd3 <unknown>\n#4 0x5636588dba7b <unknown>\n#5 0x5636588dc81e <unknown>\n#6 0x563658b3de98 <unknown>\n#7 0x563658b41d67 <unknown>\n#8 0x563658b4c32c <unknown>\n#9 0x563658b42993 <unknown>\n#10 0x563658b11827 <unknown>\n#11 0x563658b668a8 <unknown>\n#12 0x563658b66a36 <unknown>\n#13 0x563658b755f3 <unknown>\n#14 0x7fcd1398eb43 <unknown>","statusTrace":"self = <tests.test_registration_and_login.TestRegistrationAndLoginForm object at 0x7f4699563b50>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\n\n    @pytest.mark.login_form_tests()\n    @allure.story('Тест аутентификации нового пользователя.')\n    def test_login_form(self, browser):\n        page = RegistrationAndLoginPage(browser, self.main_page_url)\n        page.open_page()\n        page.login_new_user()\n>       page.should_be_login_username(By.XPATH,\n            f'//a[text()=\"Welcome {RegistrationAndLoginPage.user_data[0]}\"]')\n\ntests/test_registration_and_login.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.registration_and_login_page.RegistrationAndLoginPage object at 0x7f469960a5f0>\nlocator = ('xpath', '//a[text()=\"Welcome xharris\"]')\n\n    def should_be_login_username(self, *locator):\n        '''Проверка наличия имя пользователя, после успешной регистрации'''\n        with allure.step('Проверяем, что после успешной\\\n                         регистрации и входа мы видим имя пользователя.'):\n>           assert self.is_element_present_timeout(*locator), 'Login name is not presented.'\n\npages/registration_and_login_page.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.registration_and_login_page.RegistrationAndLoginPage object at 0x7f469960a5f0>\nhow = 'xpath', what = '//a[text()=\"Welcome xharris\"]'\n\n    def is_element_present_timeout(self, how, what):\n        '''Функция проверки элемента на странице, ожидая.'''\n        try:\n>           WebDriverWait(self.browser, timeout=2).until(\n                EC.presence_of_all_elements_located((how, what)))\n\npages/base_page.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f46993a1120>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\n\n    def _predicate(driver):\n>       return driver.find_elements(*locator)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\nby = 'xpath', value = '//a[text()=\"Welcome xharris\"]'\n\n    def find_elements(self, by=By.ID, value: Optional[str] = None) -> List[WebElement]:\n        \"\"\"Find elements given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                elements = driver.find_elements(By.CLASS_NAME, 'foo')\n    \n        :rtype: list of WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            _pkg = \".\".join(__name__.split(\".\")[:-1])\n            raw_function = pkgutil.get_data(_pkg, \"findElements.js\").decode(\"utf8\")\n            find_element_js = f\"/* findElements */return ({raw_function}).apply(null, arguments);\"\n            return self.execute_script(find_element_js, by.to_dict())\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n        # Return empty list if driver returns null\n        # See https://github.com/SeleniumHQ/selenium/issues/4555\n>       return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:770: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\ndriver_command = 'findElements'\nparams = {'using': 'xpath', 'value': '//a[text()=\"Welcome xharris\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4699609990>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Wrong password.\"},\"error\":\"unexpected alert open\",\"message\":\"unexp...\\\\n#12 0x563658b66a36 \\\\u003Cunknown>\\\\n#13 0x563658b755f3 \\\\u003Cunknown>\\\\n#14 0x7fcd1398eb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Wrong password.\nE           Message: unexpected alert open: {Alert text : Wrong password.}\nE             (Session info: headless chrome=115.0.5790.102)\nE           Stacktrace:\nE           #0 0x563658b7c783 <unknown>\nE           #1 0x5636588a8917 <unknown>\nE           #2 0x563658920783 <unknown>\nE           #3 0x563658907bd3 <unknown>\nE           #4 0x5636588dba7b <unknown>\nE           #5 0x5636588dc81e <unknown>\nE           #6 0x563658b3de98 <unknown>\nE           #7 0x563658b41d67 <unknown>\nE           #8 0x563658b4c32c <unknown>\nE           #9 0x563658b42993 <unknown>\nE           #10 0x563658b11827 <unknown>\nE           #11 0x563658b668a8 <unknown>\nE           #12 0x563658b66a36 <unknown>\nE           #13 0x563658b755f3 <unknown>\nE           #14 0x7fcd1398eb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:244: UnexpectedAlertPresentException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1690741706743,"stop":1690741706761,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1690741758313,"stop":1690741758949,"duration":636},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Wrong password.\nMessage: unexpected alert open: {Alert text : Wrong password.}\n  (Session info: headless chrome=115.0.5790.102)\nStacktrace:\n#0 0x563658b7c783 <unknown>\n#1 0x5636588a8917 <unknown>\n#2 0x563658920783 <unknown>\n#3 0x563658907bd3 <unknown>\n#4 0x5636588dba7b <unknown>\n#5 0x5636588dc81e <unknown>\n#6 0x563658b3de98 <unknown>\n#7 0x563658b41d67 <unknown>\n#8 0x563658b4c32c <unknown>\n#9 0x563658b42993 <unknown>\n#10 0x563658b11827 <unknown>\n#11 0x563658b668a8 <unknown>\n#12 0x563658b66a36 <unknown>\n#13 0x563658b755f3 <unknown>\n#14 0x7fcd1398eb43 <unknown>","statusTrace":"self = <tests.test_registration_and_login.TestRegistrationAndLoginForm object at 0x7f4699563b50>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\n\n    @pytest.mark.login_form_tests()\n    @allure.story('Тест аутентификации нового пользователя.')\n    def test_login_form(self, browser):\n        page = RegistrationAndLoginPage(browser, self.main_page_url)\n        page.open_page()\n        page.login_new_user()\n>       page.should_be_login_username(By.XPATH,\n            f'//a[text()=\"Welcome {RegistrationAndLoginPage.user_data[0]}\"]')\n\ntests/test_registration_and_login.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.registration_and_login_page.RegistrationAndLoginPage object at 0x7f469960a5f0>\nlocator = ('xpath', '//a[text()=\"Welcome xharris\"]')\n\n    def should_be_login_username(self, *locator):\n        '''Проверка наличия имя пользователя, после успешной регистрации'''\n        with allure.step('Проверяем, что после успешной\\\n                         регистрации и входа мы видим имя пользователя.'):\n>           assert self.is_element_present_timeout(*locator), 'Login name is not presented.'\n\npages/registration_and_login_page.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.registration_and_login_page.RegistrationAndLoginPage object at 0x7f469960a5f0>\nhow = 'xpath', what = '//a[text()=\"Welcome xharris\"]'\n\n    def is_element_present_timeout(self, how, what):\n        '''Функция проверки элемента на странице, ожидая.'''\n        try:\n>           WebDriverWait(self.browser, timeout=2).until(\n                EC.presence_of_all_elements_located((how, what)))\n\npages/base_page.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7f46993a1120>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\n\n    def _predicate(driver):\n>       return driver.find_elements(*locator)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\nby = 'xpath', value = '//a[text()=\"Welcome xharris\"]'\n\n    def find_elements(self, by=By.ID, value: Optional[str] = None) -> List[WebElement]:\n        \"\"\"Find elements given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                elements = driver.find_elements(By.CLASS_NAME, 'foo')\n    \n        :rtype: list of WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            _pkg = \".\".join(__name__.split(\".\")[:-1])\n            raw_function = pkgutil.get_data(_pkg, \"findElements.js\").decode(\"utf8\")\n            find_element_js = f\"/* findElements */return ({raw_function}).apply(null, arguments);\"\n            return self.execute_script(find_element_js, by.to_dict())\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n        # Return empty list if driver returns null\n        # See https://github.com/SeleniumHQ/selenium/issues/4555\n>       return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:770: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b2bea922b07232c7a51fe5fb38452d5\")>\ndriver_command = 'findElements'\nparams = {'using': 'xpath', 'value': '//a[text()=\"Welcome xharris\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4699609990>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Wrong password.\"},\"error\":\"unexpected alert open\",\"message\":\"unexp...\\\\n#12 0x563658b66a36 \\\\u003Cunknown>\\\\n#13 0x563658b755f3 \\\\u003Cunknown>\\\\n#14 0x7fcd1398eb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Wrong password.\nE           Message: unexpected alert open: {Alert text : Wrong password.}\nE             (Session info: headless chrome=115.0.5790.102)\nE           Stacktrace:\nE           #0 0x563658b7c783 <unknown>\nE           #1 0x5636588a8917 <unknown>\nE           #2 0x563658920783 <unknown>\nE           #3 0x563658907bd3 <unknown>\nE           #4 0x5636588dba7b <unknown>\nE           #5 0x5636588dc81e <unknown>\nE           #6 0x563658b3de98 <unknown>\nE           #7 0x563658b41d67 <unknown>\nE           #8 0x563658b4c32c <unknown>\nE           #9 0x563658b42993 <unknown>\nE           #10 0x563658b11827 <unknown>\nE           #11 0x563658b668a8 <unknown>\nE           #12 0x563658b66a36 <unknown>\nE           #13 0x563658b755f3 <unknown>\nE           #14 0x7fcd1398eb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:244: UnexpectedAlertPresentException","steps":[{"name":"Открываем главную страницу","time":{"start":1690741758950,"stop":1690741759325,"duration":375},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Нажаимаем на кнопку входа в учетную запись                          нового пользователя в navbar.","time":{"start":1690741759325,"stop":1690741759409,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Заполняем поля username и password.","time":{"start":1690741759409,"stop":1690741759775,"duration":366},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Нажимаем на кнопку входа в учетную запись                          нового пользователя в модальном окне регистрации.","time":{"start":1690741759775,"stop":1690741759851,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Проверяем, что после успешной                         регистрации и входа мы видим имя пользователя.","time":{"start":1690741759851,"stop":1690741760483,"duration":632},"status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Wrong password.\nMessage: unexpected alert open: {Alert text : Wrong password.}\n  (Session info: headless chrome=115.0.5790.102)\nStacktrace:\n#0 0x563658b7c783 <unknown>\n#1 0x5636588a8917 <unknown>\n#2 0x563658920783 <unknown>\n#3 0x563658907bd3 <unknown>\n#4 0x5636588dba7b <unknown>\n#5 0x5636588dc81e <unknown>\n#6 0x563658b3de98 <unknown>\n#7 0x563658b41d67 <unknown>\n#8 0x563658b4c32c <unknown>\n#9 0x563658b42993 <unknown>\n#10 0x563658b11827 <unknown>\n#11 0x563658b668a8 <unknown>\n#12 0x563658b66a36 <unknown>\n#13 0x563658b755f3 <unknown>\n#14 0x7fcd1398eb43 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/UI-test-automation/UI-test-automation/pages/registration_and_login_page.py\", line 61, in should_be_login_username\n    assert self.is_element_present_timeout(*locator), 'Login name is not presented.'\n  File \"/home/runner/work/UI-test-automation/UI-test-automation/pages/base_page.py\", line 54, in is_element_present_timeout\n    WebDriverWait(self.browser, timeout=2).until(\n  File \"/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 86, in until\n    value = method(self._driver)\n  File \"/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py\", line 187, in _predicate\n    return driver.find_elements(*locator)\n  File \"/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 770, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\n  File \"/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 244, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1690741760526,"stop":1690741760584,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Тесты регистрации и аутентификации нового пользователя."},{"name":"story","value":"Тест аутентификации нового пользователя."},{"name":"tag","value":"login_form_tests"},{"name":"tag","value":"registration_and_login_tests(scope='class', autouse=True)"},{"name":"tag","value":"run(order=1)"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_registration_and_login"},{"name":"subSuite","value":"TestRegistrationAndLoginForm"},{"name":"host","value":"fv-az955-890"},{"name":"thread","value":"2374-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_registration_and_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":9,"skipped":0,"passed":30,"unknown":0,"total":40},"items":[{"uid":"f50811d705cd7cc1","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/40//#testresult/f50811d705cd7cc1","status":"passed","time":{"start":1690738864155,"stop":1690738865764,"duration":1609}},{"uid":"441760c2f4489c3b","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/39//#testresult/441760c2f4489c3b","status":"passed","time":{"start":1690738522341,"stop":1690738524027,"duration":1686}},{"uid":"e44d704c75088ca8","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/38//#testresult/e44d704c75088ca8","status":"passed","time":{"start":1690738426354,"stop":1690738428453,"duration":2099}},{"uid":"3e04154d940fafeb","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/37//#testresult/3e04154d940fafeb","status":"passed","time":{"start":1690738274237,"stop":1690738276057,"duration":1820}},{"uid":"cb1c36eb43a8997f","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/36//#testresult/cb1c36eb43a8997f","status":"passed","time":{"start":1690737949015,"stop":1690737950828,"duration":1813}},{"uid":"f6c6e24d815c0834","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/35//#testresult/f6c6e24d815c0834","status":"passed","time":{"start":1690737875984,"stop":1690737877951,"duration":1967}},{"uid":"7246a2faa2328faa","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/34//#testresult/7246a2faa2328faa","status":"passed","time":{"start":1690737848399,"stop":1690737850517,"duration":2118}},{"uid":"fa070158bbe6137c","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/33//#testresult/fa070158bbe6137c","status":"passed","time":{"start":1690736471468,"stop":1690736473166,"duration":1698}},{"uid":"439d74e79f5fdc23","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/33//#testresult/439d74e79f5fdc23","status":"passed","time":{"start":1690736303689,"stop":1690736305330,"duration":1641}},{"uid":"24d99a727b65d11e","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/32//#testresult/24d99a727b65d11e","status":"passed","time":{"start":1690732847986,"stop":1690732849671,"duration":1685}},{"uid":"a30e469a09fe705f","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/31//#testresult/a30e469a09fe705f","status":"passed","time":{"start":1690732726916,"stop":1690732728598,"duration":1682}},{"uid":"4f576995efb8a931","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/31//#testresult/4f576995efb8a931","status":"passed","time":{"start":1690730009048,"stop":1690730010754,"duration":1706}},{"uid":"32d93860a01d869","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/30//#testresult/32d93860a01d869","status":"passed","time":{"start":1690729861677,"stop":1690729863667,"duration":1990}},{"uid":"d5c916d8e8618460","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/30//#testresult/d5c916d8e8618460","status":"passed","time":{"start":1690729746568,"stop":1690729748183,"duration":1615}},{"uid":"8fc53993d8d16c89","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/29//#testresult/8fc53993d8d16c89","status":"passed","time":{"start":1690729621951,"stop":1690729623528,"duration":1577}},{"uid":"6b585373bf9c7666","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/28//#testresult/6b585373bf9c7666","status":"passed","time":{"start":1690728968441,"stop":1690728970255,"duration":1814}},{"uid":"ee467d4161b2f015","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/27//#testresult/ee467d4161b2f015","status":"passed","time":{"start":1690728529955,"stop":1690728531726,"duration":1771}},{"uid":"d913baeae8b4bb70","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/27//#testresult/d913baeae8b4bb70","status":"passed","time":{"start":1690662951199,"stop":1690662952924,"duration":1725}},{"uid":"69eeceafbdf30bd1","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/26//#testresult/69eeceafbdf30bd1","status":"passed","time":{"start":1690660918545,"stop":1690660920461,"duration":1916}},{"uid":"b7a0d629e00fd855","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/25//#testresult/b7a0d629e00fd855","status":"passed","time":{"start":1690660714100,"stop":1690660715564,"duration":1464}}]},"tags":["registration_and_login_tests(scope='class', autouse=True)","run(order=1)","login_form_tests"]},"source":"c17a47cd1eb1d038.json","parameterValues":[]}