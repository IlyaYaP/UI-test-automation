{"uid":"a98b042bdf7bfdcc","name":"test_add_product_cart[category_locator1-product_locator1]","fullName":"tests.test_shopping_cart.TestShoppingCart#test_add_product_cart","historyId":"e61358e669bf92bb150b20e263c3d591","time":{"start":1691150809691,"stop":1691150810217,"duration":526},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.110); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x55f3b1fe6783 <unknown>\n#1 0x55f3b1d12917 <unknown>\n#2 0x55f3b1d16ebe <unknown>\n#3 0x55f3b1d18720 <unknown>\n#4 0x55f3b1d187dc <unknown>\n#5 0x55f3b1d529f2 <unknown>\n#6 0x55f3b1d474f1 <unknown>\n#7 0x55f3b1d71e02 <unknown>\n#8 0x55f3b1d46fb6 <unknown>\n#9 0x55f3b1d71fce <unknown>\n#10 0x55f3b1d8a0d9 <unknown>\n#11 0x55f3b1d71bd3 <unknown>\n#12 0x55f3b1d45a7b <unknown>\n#13 0x55f3b1d4681e <unknown>\n#14 0x55f3b1fa7e98 <unknown>\n#15 0x55f3b1fabd67 <unknown>\n#16 0x55f3b1fb632c <unknown>\n#17 0x55f3b1fac993 <unknown>\n#18 0x55f3b1f7b827 <unknown>\n#19 0x55f3b1fd08a8 <unknown>\n#20 0x55f3b1fd0a36 <unknown>\n#21 0x55f3b1fdf5f3 <unknown>\n#22 0x7f42fddb5b43 <unknown>","statusTrace":"self = <tests.test_shopping_cart.TestShoppingCart object at 0x7f73fcdeb7f0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\")>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('css selector', 'a[href=\"prod.html?idp_=1\"]')\n\n    @pytest.mark.parametrize('category_locator, product_locator',\n                             [PlacingAnOrderLocators.laptop_locators,\n                              PlacingAnOrderLocators.phone_locators,\n                              PlacingAnOrderLocators.monitor_locators])\n    @pytest.mark.add_product_cart_test()\n    @allure.story('Тест добавления продуктов в корзину.')\n    def test_add_product_cart(self,\n                              browser,\n                              category_locator,\n                              product_locator):\n        page = ShoppingCartPage(browser, self.main_page_url)\n        page.open_page()\n>       page.add_product_cart(category_locator, product_locator)\n\ntests/test_shopping_cart.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.shopping_cart_page.ShoppingCartPage object at 0x7f73fcfa1060>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('css selector', 'a[href=\"prod.html?idp_=1\"]')\n\n    def add_product_cart(self, category_locator, product_locator):\n        category_button = self.find_element(category_locator)\n        category_button.click()\n        ignored_exceptions = (NoSuchElementException,\n                              StaleElementReferenceException,)\n        WebDriverWait(self.browser,\n                      timeout=2,\n                      ignored_exceptions=ignored_exceptions).until(\n            EC.presence_of_all_elements_located((product_locator)))\n        product_button = self.find_element(product_locator)\n>       product_button.click()\n\npages/shopping_cart_page.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\", element=\"E77F61DF825FBB13AE9E4DC1E77C3A61_element_50\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\", element=\"E77F61DF825FBB13AE9E4DC1E77C3A61_element_50\")>\ncommand = 'clickElement'\nparams = {'id': 'E77F61DF825FBB13AE9E4DC1E77C3A61_element_50'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\")>\ndriver_command = 'clickElement'\nparams = {'id': 'E77F61DF825FBB13AE9E4DC1E77C3A61_element_50'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f73fcfa1360>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#20 0x55f3b1fd0a36 \\\\u003Cunknown>\\\\n#21 0x55f3b1fdf5f3 \\\\u003Cunknown>\\\\n#22 0x7f42fddb5b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=115.0.5790.110); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x55f3b1fe6783 <unknown>\nE       #1 0x55f3b1d12917 <unknown>\nE       #2 0x55f3b1d16ebe <unknown>\nE       #3 0x55f3b1d18720 <unknown>\nE       #4 0x55f3b1d187dc <unknown>\nE       #5 0x55f3b1d529f2 <unknown>\nE       #6 0x55f3b1d474f1 <unknown>\nE       #7 0x55f3b1d71e02 <unknown>\nE       #8 0x55f3b1d46fb6 <unknown>\nE       #9 0x55f3b1d71fce <unknown>\nE       #10 0x55f3b1d8a0d9 <unknown>\nE       #11 0x55f3b1d71bd3 <unknown>\nE       #12 0x55f3b1d45a7b <unknown>\nE       #13 0x55f3b1d4681e <unknown>\nE       #14 0x55f3b1fa7e98 <unknown>\nE       #15 0x55f3b1fabd67 <unknown>\nE       #16 0x55f3b1fb632c <unknown>\nE       #17 0x55f3b1fac993 <unknown>\nE       #18 0x55f3b1f7b827 <unknown>\nE       #19 0x55f3b1fd08a8 <unknown>\nE       #20 0x55f3b1fd0a36 <unknown>\nE       #21 0x55f3b1fdf5f3 <unknown>\nE       #22 0x7f42fddb5b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1691150800430,"stop":1691150800447,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"browser","time":{"start":1691150809063,"stop":1691150809690,"duration":627},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.110); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x55f3b1fe6783 <unknown>\n#1 0x55f3b1d12917 <unknown>\n#2 0x55f3b1d16ebe <unknown>\n#3 0x55f3b1d18720 <unknown>\n#4 0x55f3b1d187dc <unknown>\n#5 0x55f3b1d529f2 <unknown>\n#6 0x55f3b1d474f1 <unknown>\n#7 0x55f3b1d71e02 <unknown>\n#8 0x55f3b1d46fb6 <unknown>\n#9 0x55f3b1d71fce <unknown>\n#10 0x55f3b1d8a0d9 <unknown>\n#11 0x55f3b1d71bd3 <unknown>\n#12 0x55f3b1d45a7b <unknown>\n#13 0x55f3b1d4681e <unknown>\n#14 0x55f3b1fa7e98 <unknown>\n#15 0x55f3b1fabd67 <unknown>\n#16 0x55f3b1fb632c <unknown>\n#17 0x55f3b1fac993 <unknown>\n#18 0x55f3b1f7b827 <unknown>\n#19 0x55f3b1fd08a8 <unknown>\n#20 0x55f3b1fd0a36 <unknown>\n#21 0x55f3b1fdf5f3 <unknown>\n#22 0x7f42fddb5b43 <unknown>","statusTrace":"self = <tests.test_shopping_cart.TestShoppingCart object at 0x7f73fcdeb7f0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\")>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('css selector', 'a[href=\"prod.html?idp_=1\"]')\n\n    @pytest.mark.parametrize('category_locator, product_locator',\n                             [PlacingAnOrderLocators.laptop_locators,\n                              PlacingAnOrderLocators.phone_locators,\n                              PlacingAnOrderLocators.monitor_locators])\n    @pytest.mark.add_product_cart_test()\n    @allure.story('Тест добавления продуктов в корзину.')\n    def test_add_product_cart(self,\n                              browser,\n                              category_locator,\n                              product_locator):\n        page = ShoppingCartPage(browser, self.main_page_url)\n        page.open_page()\n>       page.add_product_cart(category_locator, product_locator)\n\ntests/test_shopping_cart.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.shopping_cart_page.ShoppingCartPage object at 0x7f73fcfa1060>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('css selector', 'a[href=\"prod.html?idp_=1\"]')\n\n    def add_product_cart(self, category_locator, product_locator):\n        category_button = self.find_element(category_locator)\n        category_button.click()\n        ignored_exceptions = (NoSuchElementException,\n                              StaleElementReferenceException,)\n        WebDriverWait(self.browser,\n                      timeout=2,\n                      ignored_exceptions=ignored_exceptions).until(\n            EC.presence_of_all_elements_located((product_locator)))\n        product_button = self.find_element(product_locator)\n>       product_button.click()\n\npages/shopping_cart_page.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\", element=\"E77F61DF825FBB13AE9E4DC1E77C3A61_element_50\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\", element=\"E77F61DF825FBB13AE9E4DC1E77C3A61_element_50\")>\ncommand = 'clickElement'\nparams = {'id': 'E77F61DF825FBB13AE9E4DC1E77C3A61_element_50'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0c18759fb4aa89a54ad489f5f1c6ec83\")>\ndriver_command = 'clickElement'\nparams = {'id': 'E77F61DF825FBB13AE9E4DC1E77C3A61_element_50'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f73fcfa1360>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#20 0x55f3b1fd0a36 \\\\u003Cunknown>\\\\n#21 0x55f3b1fdf5f3 \\\\u003Cunknown>\\\\n#22 0x7f42fddb5b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=115.0.5790.110); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x55f3b1fe6783 <unknown>\nE       #1 0x55f3b1d12917 <unknown>\nE       #2 0x55f3b1d16ebe <unknown>\nE       #3 0x55f3b1d18720 <unknown>\nE       #4 0x55f3b1d187dc <unknown>\nE       #5 0x55f3b1d529f2 <unknown>\nE       #6 0x55f3b1d474f1 <unknown>\nE       #7 0x55f3b1d71e02 <unknown>\nE       #8 0x55f3b1d46fb6 <unknown>\nE       #9 0x55f3b1d71fce <unknown>\nE       #10 0x55f3b1d8a0d9 <unknown>\nE       #11 0x55f3b1d71bd3 <unknown>\nE       #12 0x55f3b1d45a7b <unknown>\nE       #13 0x55f3b1d4681e <unknown>\nE       #14 0x55f3b1fa7e98 <unknown>\nE       #15 0x55f3b1fabd67 <unknown>\nE       #16 0x55f3b1fb632c <unknown>\nE       #17 0x55f3b1fac993 <unknown>\nE       #18 0x55f3b1f7b827 <unknown>\nE       #19 0x55f3b1fd08a8 <unknown>\nE       #20 0x55f3b1fd0a36 <unknown>\nE       #21 0x55f3b1fdf5f3 <unknown>\nE       #22 0x7f42fddb5b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","steps":[{"name":"Открываем главную страницу","time":{"start":1691150809692,"stop":1691150809932,"duration":240},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1691150810335,"stop":1691150810391,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Тест добавления продуктов в корзину."},{"name":"feature","value":"Тесты добавления продукта в корзину и оформления заказа."},{"name":"tag","value":"add_product_cart_test"},{"name":"tag","value":"shopping_cart_tests(scope='class', autouse=True)"},{"name":"tag","value":"run(order=3)"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_shopping_cart"},{"name":"subSuite","value":"TestShoppingCart"},{"name":"host","value":"fv-az1128-912"},{"name":"thread","value":"2187-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_shopping_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"category_locator","value":"('xpath', '//a[text()=\"Phones\"]')"},{"name":"product_locator","value":"('css selector', 'a[href=\"prod.html?idp_=1\"]')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":9,"unknown":0,"total":11},"items":[{"uid":"f44c6081c4ac3807","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/41//#testresult/f44c6081c4ac3807","status":"passed","time":{"start":1690741765246,"stop":1690741766675,"duration":1429}},{"uid":"46a17b18a5b03561","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/40//#testresult/46a17b18a5b03561","status":"passed","time":{"start":1690738870050,"stop":1690738871352,"duration":1302}},{"uid":"d9bb5ce361949eaa","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/39//#testresult/d9bb5ce361949eaa","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x563c7ef34783 <unknown>\n#1 0x563c7ec60917 <unknown>\n#2 0x563c7ec64ebe <unknown>\n#3 0x563c7ec66720 <unknown>\n#4 0x563c7ec667dc <unknown>\n#5 0x563c7eca09f2 <unknown>\n#6 0x563c7ec954f1 <unknown>\n#7 0x563c7ecbfe02 <unknown>\n#8 0x563c7ec94fb6 <unknown>\n#9 0x563c7ecbffce <unknown>\n#10 0x563c7ecd80d9 <unknown>\n#11 0x563c7ecbfbd3 <unknown>\n#12 0x563c7ec93a7b <unknown>\n#13 0x563c7ec9481e <unknown>\n#14 0x563c7eef5e98 <unknown>\n#15 0x563c7eef9d67 <unknown>\n#16 0x563c7ef0432c <unknown>\n#17 0x563c7eefa993 <unknown>\n#18 0x563c7eec9827 <unknown>\n#19 0x563c7ef1e8a8 <unknown>\n#20 0x563c7ef1ea36 <unknown>\n#21 0x563c7ef2d5f3 <unknown>\n#22 0x7f5b3df41b43 <unknown>","time":{"start":1690738528531,"stop":1690738529069,"duration":538}},{"uid":"cd56b33b9dacfb8","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/38//#testresult/cd56b33b9dacfb8","status":"passed","time":{"start":1690738433965,"stop":1690738435866,"duration":1901}},{"uid":"a0228ab076b1e99","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/37//#testresult/a0228ab076b1e99","status":"passed","time":{"start":1690738280690,"stop":1690738282165,"duration":1475}},{"uid":"fc2765e1f40aa5d0","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/36//#testresult/fc2765e1f40aa5d0","status":"passed","time":{"start":1690737955348,"stop":1690737956790,"duration":1442}},{"uid":"5836810eedf87bca","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/35//#testresult/5836810eedf87bca","status":"passed","time":{"start":1690737882898,"stop":1690737884602,"duration":1704}},{"uid":"936c74e480941a4a","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/34//#testresult/936c74e480941a4a","status":"passed","time":{"start":1690737855841,"stop":1690737857734,"duration":1893}},{"uid":"82ed400254a77b2d","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/33//#testresult/82ed400254a77b2d","status":"passed","time":{"start":1690736477660,"stop":1690736479039,"duration":1379}},{"uid":"62748e10b7b198a7","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/33//#testresult/62748e10b7b198a7","status":"passed","time":{"start":1690736309835,"stop":1690736311360,"duration":1525}}]},"tags":["run(order=3)","add_product_cart_test","shopping_cart_tests(scope='class', autouse=True)"]},"source":"a98b042bdf7bfdcc.json","parameterValues":["('xpath', '//a[text()=\"Phones\"]')","('css selector', 'a[href=\"prod.html?idp_=1\"]')"]}