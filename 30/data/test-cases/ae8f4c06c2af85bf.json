{"uid":"ae8f4c06c2af85bf","name":"test_add_product_cart[category_locator1-product_locator1]","fullName":"tests.test_shopping_cart.TestShoppingCart#test_add_product_cart","historyId":"40ec9d05c37efa07e3f4349d44023431","time":{"start":1690729868435,"stop":1690729869002,"duration":567},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x557d77056783 <unknown>\n#1 0x557d76d82917 <unknown>\n#2 0x557d76d86ebe <unknown>\n#3 0x557d76d88720 <unknown>\n#4 0x557d76d887dc <unknown>\n#5 0x557d76dc29f2 <unknown>\n#6 0x557d76db74f1 <unknown>\n#7 0x557d76de1e02 <unknown>\n#8 0x557d76db6fb6 <unknown>\n#9 0x557d76de1fce <unknown>\n#10 0x557d76dfa0d9 <unknown>\n#11 0x557d76de1bd3 <unknown>\n#12 0x557d76db5a7b <unknown>\n#13 0x557d76db681e <unknown>\n#14 0x557d77017e98 <unknown>\n#15 0x557d7701bd67 <unknown>\n#16 0x557d7702632c <unknown>\n#17 0x557d7701c993 <unknown>\n#18 0x557d76feb827 <unknown>\n#19 0x557d770408a8 <unknown>\n#20 0x557d77040a36 <unknown>\n#21 0x557d7704f5f3 <unknown>\n#22 0x7fccd657cb43 <unknown>","statusTrace":"self = <tests.test_shopping_cart.TestShoppingCart object at 0x7f8ff54907f0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c089b067cf9a3243f85d01f56d421ff\")>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('xpath', '//a[text()=\"Sony xperia z5\"]')\n\n    @pytest.mark.parametrize('category_locator, product_locator',\n                             [PlacingAnOrderLocators.laptop_locators,\n                              PlacingAnOrderLocators.phone_locators,\n                              PlacingAnOrderLocators.monitor_locators])\n    @pytest.mark.add_product_cart_test()\n    @allure.story('Тест добавления продуктов в корзину.')\n    def test_add_product_cart(self,\n                              browser,\n                              category_locator,\n                              product_locator):\n        page = ShoppingCartPage(browser, self.main_page_url)\n        page.open_page()\n>       page.add_product_cart(category_locator, product_locator)\n\ntests/test_shopping_cart.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.shopping_cart_page.ShoppingCartPage object at 0x7f8ff551e0e0>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('xpath', '//a[text()=\"Sony xperia z5\"]')\n\n    def add_product_cart(self, category_locator, product_locator):\n        category_button = self.find_element(category_locator)\n        category_button.click()\n        ignored_exceptions = (NoSuchElementException,\n                              StaleElementReferenceException,)\n        WebDriverWait(self.browser,\n                      timeout=2,\n                      ignored_exceptions=ignored_exceptions).until(\n            EC.presence_of_all_elements_located((product_locator)))\n        product_button = self.find_element(product_locator)\n>       product_button.click()\n\npages/shopping_cart_page.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"6c089b067cf9a3243f85d01f56d421ff\", element=\"288675E85D15FDCE9BAFFA8858DF6258_element_50\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"6c089b067cf9a3243f85d01f56d421ff\", element=\"288675E85D15FDCE9BAFFA8858DF6258_element_50\")>\ncommand = 'clickElement'\nparams = {'id': '288675E85D15FDCE9BAFFA8858DF6258_element_50'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c089b067cf9a3243f85d01f56d421ff\")>\ndriver_command = 'clickElement'\nparams = {'id': '288675E85D15FDCE9BAFFA8858DF6258_element_50'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8ff551d990>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#20 0x557d77040a36 \\\\u003Cunknown>\\\\n#21 0x557d7704f5f3 \\\\u003Cunknown>\\\\n#22 0x7fccd657cb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x557d77056783 <unknown>\nE       #1 0x557d76d82917 <unknown>\nE       #2 0x557d76d86ebe <unknown>\nE       #3 0x557d76d88720 <unknown>\nE       #4 0x557d76d887dc <unknown>\nE       #5 0x557d76dc29f2 <unknown>\nE       #6 0x557d76db74f1 <unknown>\nE       #7 0x557d76de1e02 <unknown>\nE       #8 0x557d76db6fb6 <unknown>\nE       #9 0x557d76de1fce <unknown>\nE       #10 0x557d76dfa0d9 <unknown>\nE       #11 0x557d76de1bd3 <unknown>\nE       #12 0x557d76db5a7b <unknown>\nE       #13 0x557d76db681e <unknown>\nE       #14 0x557d77017e98 <unknown>\nE       #15 0x557d7701bd67 <unknown>\nE       #16 0x557d7702632c <unknown>\nE       #17 0x557d7701c993 <unknown>\nE       #18 0x557d76feb827 <unknown>\nE       #19 0x557d770408a8 <unknown>\nE       #20 0x557d77040a36 <unknown>\nE       #21 0x557d7704f5f3 <unknown>\nE       #22 0x7fccd657cb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1690729858053,"stop":1690729858075,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"browser","time":{"start":1690729867767,"stop":1690729868434,"duration":667},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x557d77056783 <unknown>\n#1 0x557d76d82917 <unknown>\n#2 0x557d76d86ebe <unknown>\n#3 0x557d76d88720 <unknown>\n#4 0x557d76d887dc <unknown>\n#5 0x557d76dc29f2 <unknown>\n#6 0x557d76db74f1 <unknown>\n#7 0x557d76de1e02 <unknown>\n#8 0x557d76db6fb6 <unknown>\n#9 0x557d76de1fce <unknown>\n#10 0x557d76dfa0d9 <unknown>\n#11 0x557d76de1bd3 <unknown>\n#12 0x557d76db5a7b <unknown>\n#13 0x557d76db681e <unknown>\n#14 0x557d77017e98 <unknown>\n#15 0x557d7701bd67 <unknown>\n#16 0x557d7702632c <unknown>\n#17 0x557d7701c993 <unknown>\n#18 0x557d76feb827 <unknown>\n#19 0x557d770408a8 <unknown>\n#20 0x557d77040a36 <unknown>\n#21 0x557d7704f5f3 <unknown>\n#22 0x7fccd657cb43 <unknown>","statusTrace":"self = <tests.test_shopping_cart.TestShoppingCart object at 0x7f8ff54907f0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c089b067cf9a3243f85d01f56d421ff\")>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('xpath', '//a[text()=\"Sony xperia z5\"]')\n\n    @pytest.mark.parametrize('category_locator, product_locator',\n                             [PlacingAnOrderLocators.laptop_locators,\n                              PlacingAnOrderLocators.phone_locators,\n                              PlacingAnOrderLocators.monitor_locators])\n    @pytest.mark.add_product_cart_test()\n    @allure.story('Тест добавления продуктов в корзину.')\n    def test_add_product_cart(self,\n                              browser,\n                              category_locator,\n                              product_locator):\n        page = ShoppingCartPage(browser, self.main_page_url)\n        page.open_page()\n>       page.add_product_cart(category_locator, product_locator)\n\ntests/test_shopping_cart.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.shopping_cart_page.ShoppingCartPage object at 0x7f8ff551e0e0>\ncategory_locator = ('xpath', '//a[text()=\"Phones\"]')\nproduct_locator = ('xpath', '//a[text()=\"Sony xperia z5\"]')\n\n    def add_product_cart(self, category_locator, product_locator):\n        category_button = self.find_element(category_locator)\n        category_button.click()\n        ignored_exceptions = (NoSuchElementException,\n                              StaleElementReferenceException,)\n        WebDriverWait(self.browser,\n                      timeout=2,\n                      ignored_exceptions=ignored_exceptions).until(\n            EC.presence_of_all_elements_located((product_locator)))\n        product_button = self.find_element(product_locator)\n>       product_button.click()\n\npages/shopping_cart_page.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"6c089b067cf9a3243f85d01f56d421ff\", element=\"288675E85D15FDCE9BAFFA8858DF6258_element_50\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"6c089b067cf9a3243f85d01f56d421ff\", element=\"288675E85D15FDCE9BAFFA8858DF6258_element_50\")>\ncommand = 'clickElement'\nparams = {'id': '288675E85D15FDCE9BAFFA8858DF6258_element_50'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6c089b067cf9a3243f85d01f56d421ff\")>\ndriver_command = 'clickElement'\nparams = {'id': '288675E85D15FDCE9BAFFA8858DF6258_element_50'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8ff551d990>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#20 0x557d77040a36 \\\\u003Cunknown>\\\\n#21 0x557d7704f5f3 \\\\u003Cunknown>\\\\n#22 0x7fccd657cb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x557d77056783 <unknown>\nE       #1 0x557d76d82917 <unknown>\nE       #2 0x557d76d86ebe <unknown>\nE       #3 0x557d76d88720 <unknown>\nE       #4 0x557d76d887dc <unknown>\nE       #5 0x557d76dc29f2 <unknown>\nE       #6 0x557d76db74f1 <unknown>\nE       #7 0x557d76de1e02 <unknown>\nE       #8 0x557d76db6fb6 <unknown>\nE       #9 0x557d76de1fce <unknown>\nE       #10 0x557d76dfa0d9 <unknown>\nE       #11 0x557d76de1bd3 <unknown>\nE       #12 0x557d76db5a7b <unknown>\nE       #13 0x557d76db681e <unknown>\nE       #14 0x557d77017e98 <unknown>\nE       #15 0x557d7701bd67 <unknown>\nE       #16 0x557d7702632c <unknown>\nE       #17 0x557d7701c993 <unknown>\nE       #18 0x557d76feb827 <unknown>\nE       #19 0x557d770408a8 <unknown>\nE       #20 0x557d77040a36 <unknown>\nE       #21 0x557d7704f5f3 <unknown>\nE       #22 0x7fccd657cb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","steps":[{"name":"Открываем главную страницу","time":{"start":1690729868437,"stop":1690729868743,"duration":306},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":1},"afterStages":[{"name":"browser::0","time":{"start":1690729869103,"stop":1690729869160,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Тесты добавления продукта в корзину и оформления заказа."},{"name":"story","value":"Тест добавления продуктов в корзину."},{"name":"tag","value":"add_product_cart_test"},{"name":"tag","value":"shopping_cart_tests(scope='class', autouse=True)"},{"name":"tag","value":"run(order=3)"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_shopping_cart"},{"name":"subSuite","value":"TestShoppingCart"},{"name":"host","value":"fv-az449-351"},{"name":"thread","value":"2370-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_shopping_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"category_locator","value":"('xpath', '//a[text()=\"Phones\"]')"},{"name":"product_locator","value":"('xpath', '//a[text()=\"Sony xperia z5\"]')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":7,"skipped":0,"passed":7,"unknown":0,"total":14},"items":[{"uid":"c974d3d53288529","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/30//#testresult/c974d3d53288529","status":"passed","time":{"start":1690729752671,"stop":1690729754102,"duration":1431}},{"uid":"e52ece41079b5214","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/29//#testresult/e52ece41079b5214","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x558d6188b783 <unknown>\n#1 0x558d615b7917 <unknown>\n#2 0x558d615bbebe <unknown>\n#3 0x558d615bd720 <unknown>\n#4 0x558d615bd7dc <unknown>\n#5 0x558d615f79f2 <unknown>\n#6 0x558d615f7004 <unknown>\n#7 0x558d615ec599 <unknown>\n#8 0x558d61616e02 <unknown>\n#9 0x558d615ebfb6 <unknown>\n#10 0x558d61616fce <unknown>\n#11 0x558d6162f0d9 <unknown>\n#12 0x558d61616bd3 <unknown>\n#13 0x558d615eaa7b <unknown>\n#14 0x558d615eb81e <unknown>\n#15 0x558d6184ce98 <unknown>\n#16 0x558d61850d67 <unknown>\n#17 0x558d6185b32c <unknown>\n#18 0x558d61851993 <unknown>\n#19 0x558d61820827 <unknown>\n#20 0x558d618758a8 <unknown>\n#21 0x558d61875a36 <unknown>\n#22 0x558d618845f3 <unknown>\n#23 0x7f1052b29b43 <unknown>","time":{"start":1690729627814,"stop":1690729628315,"duration":501}},{"uid":"afee54f45fab5943","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/28//#testresult/afee54f45fab5943","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5626228db783 <unknown>\n#1 0x562622607917 <unknown>\n#2 0x56262260bebe <unknown>\n#3 0x56262260d720 <unknown>\n#4 0x56262260d7dc <unknown>\n#5 0x5626226479f2 <unknown>\n#6 0x56262263c4f1 <unknown>\n#7 0x562622666e02 <unknown>\n#8 0x56262263bfb6 <unknown>\n#9 0x562622666fce <unknown>\n#10 0x56262267f0d9 <unknown>\n#11 0x562622666bd3 <unknown>\n#12 0x56262263aa7b <unknown>\n#13 0x56262263b81e <unknown>\n#14 0x56262289ce98 <unknown>\n#15 0x5626228a0d67 <unknown>\n#16 0x5626228ab32c <unknown>\n#17 0x5626228a1993 <unknown>\n#18 0x562622870827 <unknown>\n#19 0x5626228c58a8 <unknown>\n#20 0x5626228c5a36 <unknown>\n#21 0x5626228d45f3 <unknown>\n#22 0x7fe6b6a74b43 <unknown>","time":{"start":1690728974957,"stop":1690728975542,"duration":585}},{"uid":"7d43243c4cfd85ed","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/27//#testresult/7d43243c4cfd85ed","status":"passed","time":{"start":1690728536300,"stop":1690728537729,"duration":1429}},{"uid":"6eae803e94534827","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/27//#testresult/6eae803e94534827","status":"passed","time":{"start":1690662957566,"stop":1690662959042,"duration":1476}},{"uid":"7697db938f051895","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/26//#testresult/7697db938f051895","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x55e1160d8783 <unknown>\n#1 0x55e115e04917 <unknown>\n#2 0x55e115e08ebe <unknown>\n#3 0x55e115e0a720 <unknown>\n#4 0x55e115e0a7dc <unknown>\n#5 0x55e115e44fcf <unknown>\n#6 0x55e115e440e7 <unknown>\n#7 0x55e115e39599 <unknown>\n#8 0x55e115e63e02 <unknown>\n#9 0x55e115e38fb6 <unknown>\n#10 0x55e115e63fce <unknown>\n#11 0x55e115e7c0d9 <unknown>\n#12 0x55e115e63bd3 <unknown>\n#13 0x55e115e37a7b <unknown>\n#14 0x55e115e3881e <unknown>\n#15 0x55e116099e98 <unknown>\n#16 0x55e11609dd67 <unknown>\n#17 0x55e1160a832c <unknown>\n#18 0x55e11609e993 <unknown>\n#19 0x55e11606d827 <unknown>\n#20 0x55e1160c28a8 <unknown>\n#21 0x55e1160c2a36 <unknown>\n#22 0x55e1160d15f3 <unknown>\n#23 0x7f207481ab43 <unknown>","time":{"start":1690660925253,"stop":1690660925847,"duration":594}},{"uid":"23cbb9c007f4ba20","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/25//#testresult/23cbb9c007f4ba20","status":"passed","time":{"start":1690660720263,"stop":1690660721560,"duration":1297}},{"uid":"638c19d0467ad1b9","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/25//#testresult/638c19d0467ad1b9","status":"passed","time":{"start":1690660254452,"stop":1690660255835,"duration":1383}},{"uid":"a6062101f16409da","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/25//#testresult/a6062101f16409da","status":"passed","time":{"start":1690659776618,"stop":1690659778040,"duration":1422}},{"uid":"49e74ee70d98bd79","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/24//#testresult/49e74ee70d98bd79","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x56196bb4f783 <unknown>\n#1 0x56196b87b917 <unknown>\n#2 0x56196b87febe <unknown>\n#3 0x56196b881720 <unknown>\n#4 0x56196b8817dc <unknown>\n#5 0x56196b8bb9f2 <unknown>\n#6 0x56196b8b04f1 <unknown>\n#7 0x56196b8dae02 <unknown>\n#8 0x56196b8affb6 <unknown>\n#9 0x56196b8dafce <unknown>\n#10 0x56196b8f30d9 <unknown>\n#11 0x56196b8dabd3 <unknown>\n#12 0x56196b8aea7b <unknown>\n#13 0x56196b8af81e <unknown>\n#14 0x56196bb10e98 <unknown>\n#15 0x56196bb14d67 <unknown>\n#16 0x56196bb1f32c <unknown>\n#17 0x56196bb15993 <unknown>\n#18 0x56196bae4827 <unknown>\n#19 0x56196bb398a8 <unknown>\n#20 0x56196bb39a36 <unknown>\n#21 0x56196bb485f3 <unknown>\n#22 0x7f4a18fb6b43 <unknown>","time":{"start":1690659385728,"stop":1690659386319,"duration":591}},{"uid":"969d5371eefbfa95","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/24//#testresult/969d5371eefbfa95","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x559311f8e783 <unknown>\n#1 0x559311cba917 <unknown>\n#2 0x559311cbeebe <unknown>\n#3 0x559311cc0720 <unknown>\n#4 0x559311cc07dc <unknown>\n#5 0x559311cfafcf <unknown>\n#6 0x559311cfa0e7 <unknown>\n#7 0x559311cef599 <unknown>\n#8 0x559311d19e02 <unknown>\n#9 0x559311ceefb6 <unknown>\n#10 0x559311d19fce <unknown>\n#11 0x559311d320d9 <unknown>\n#12 0x559311d19bd3 <unknown>\n#13 0x559311ceda7b <unknown>\n#14 0x559311cee81e <unknown>\n#15 0x559311f4fe98 <unknown>\n#16 0x559311f53d67 <unknown>\n#17 0x559311f5e32c <unknown>\n#18 0x559311f54993 <unknown>\n#19 0x559311f23827 <unknown>\n#20 0x559311f788a8 <unknown>\n#21 0x559311f78a36 <unknown>\n#22 0x559311f875f3 <unknown>\n#23 0x7ff4134e2b43 <unknown>","time":{"start":1690659196745,"stop":1690659197270,"duration":525}},{"uid":"897f87c1567e6ed7","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/24//#testresult/897f87c1567e6ed7","status":"passed","time":{"start":1690658940346,"stop":1690658941835,"duration":1489}},{"uid":"5538483443e4eb8e","reportUrl":"https://IlyaYaP.github.io/UI-test-automation/24//#testresult/5538483443e4eb8e","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: headless chrome=115.0.5790.102); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5575ebf62783 <unknown>\n#1 0x5575ebc8e917 <unknown>\n#2 0x5575ebc92ebe <unknown>\n#3 0x5575ebc94720 <unknown>\n#4 0x5575ebc947dc <unknown>\n#5 0x5575ebcce9f2 <unknown>\n#6 0x5575ebcc34f1 <unknown>\n#7 0x5575ebcede02 <unknown>\n#8 0x5575ebcc2fb6 <unknown>\n#9 0x5575ebcedfce <unknown>\n#10 0x5575ebd060d9 <unknown>\n#11 0x5575ebcedbd3 <unknown>\n#12 0x5575ebcc1a7b <unknown>\n#13 0x5575ebcc281e <unknown>\n#14 0x5575ebf23e98 <unknown>\n#15 0x5575ebf27d67 <unknown>\n#16 0x5575ebf3232c <unknown>\n#17 0x5575ebf28993 <unknown>\n#18 0x5575ebef7827 <unknown>\n#19 0x5575ebf4c8a8 <unknown>\n#20 0x5575ebf4ca36 <unknown>\n#21 0x5575ebf5b5f3 <unknown>\n#22 0x7f7514001b43 <unknown>","time":{"start":1690658466891,"stop":1690658467508,"duration":617}}]},"tags":["run(order=3)","add_product_cart_test","shopping_cart_tests(scope='class', autouse=True)"]},"source":"ae8f4c06c2af85bf.json","parameterValues":["('xpath', '//a[text()=\"Phones\"]')","('xpath', '//a[text()=\"Sony xperia z5\"]')"]}